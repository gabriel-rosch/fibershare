// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   // "admin", "operator_admin", "operator_user", "client"
  status    String   // "active", "inactive"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")

  // Relação com a operadora (para funcionários)
  operatorId String? @map("operator_id")
  operator   Operator? @relation(fields: [operatorId], references: [id])

  serviceOrders     ServiceOrder[] @relation("RequesterOrders")
  targetOrders      ServiceOrder[] @relation("TargetOrders")
  portOrdersRequested PortServiceOrder[] @relation("RequesterPortOrders")
  portOrdersOwned     PortServiceOrder[] @relation("OwnerPortOrders")
  
  @@map("users")
}

// Modelo de operadora (antiga Operator)
model Operator {
  id                String   @id @default(uuid())
  name              String
  logo              String?
  region            String
  description       String
  contactEmail      String   @map("contact_email")
  contactPhone      String   @map("contact_phone")
  partnershipStatus String?  @default("none") @map("partnership_status") // "none", "pending", "active"
  rating            Float    @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Campos para integração com Stripe
  stripeCustomerId     String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId String?   @map("stripe_subscription_id") // ID da assinatura Stripe ativa
  stripePlanId         String?   @map("stripe_plan_id") // ID do Price (plano) Stripe ativo
  subscriptionStatus   String?   @default("inactive") @map("subscription_status") // active, inactive, canceled, past_due, pending_payment

  
  // Relações
  users             User[]    // Funcionários da operadora
  ctos              CTO[]
  operatorSubscription OperatorSubscription?
  
  @@map("operators")
}

// Modelo de CTO (Central Terminal Office)
model CTO {
  id            String     @id @default(cuid())
  name          String
  totalPorts    Int
  occupiedPorts Int       @default(0)
  status        String    // 'active', 'inactive', 'maintenance'
  latitude      Float
  longitude     Float
  operatorId    String
  operator      Operator  @relation(fields: [operatorId], references: [id])
  ports         CTOPort[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([operatorId])
}

// Modelo de porta de CTO
model CTOPort {
  id           String   @id @default(cuid())
  ctoId        String
  number       Int
  status       String   // 'available', 'occupied', 'reserved', 'maintenance'
  clientId     String?
  price        Float?
  lastModified DateTime @default(now())
  cto          CTO     @relation(fields: [ctoId], references: [id], onDelete: Cascade)
  portOrders   PortServiceOrder[]

  @@unique([ctoId, number])
  @@index([ctoId])
}

// Modelo de ordem de serviço
model ServiceOrder {
  id            String   @id @default(uuid())
  type          String   // "partnership_request", "maintenance", "installation", "cancellation", "support", "removal", "other"
  status        String   // "pending", "in_progress", "completed", "rejected", "cancelled"
  title         String
  description   String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  completedAt   DateTime? @map("completed_at")
  
  // Relações
  requesterId   String   @map("requester_id")
  requester     User     @relation("RequesterOrders", fields: [requesterId], references: [id])
  targetId      String   @map("target_id")
  target        User     @relation("TargetOrders", fields: [targetId], references: [id])
  notes         ServiceOrderNote[]
  
  @@map("service_orders")
}

// Modelo de nota de ordem de serviço
model ServiceOrderNote {
  id            String   @id @default(uuid())
  content       String
  createdAt     DateTime @default(now()) @map("created_at")
  isSystemNote  Boolean  @default(false) @map("is_system_note")
  
  // Relações
  orderId       String   @map("order_id")
  order         ServiceOrder @relation(fields: [orderId], references: [id])
  authorId      String   @map("author_id")
  authorName    String   @map("author_name")
  
  @@map("service_order_notes")
}

// Modelo de ordem de serviço de porta
model PortServiceOrder {
  id                      String   @id @default(uuid())
  status                  String   // "pending_approval", "rejected", "contract_generated", "contract_signed", "installation_scheduled", "installation_in_progress", "completed", "cancelled"
  scheduledDate           DateTime? @map("scheduled_date")
  completedDate           DateTime? @map("completed_date")
  contractUrl             String?  @map("contract_url")
  contractSignedByRequester Boolean @default(false) @map("contract_signed_by_requester")
  contractSignedByOwner   Boolean  @default(false) @map("contract_signed_by_owner")
  price                   Float    // Preço mensal do aluguel
  installationFee         Float    @map("installation_fee") // Taxa de instalação (única)
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  
  // Relações
  requesterId             String   @map("requester_id")
  requester               User     @relation("RequesterPortOrders", fields: [requesterId], references: [id])
  ownerId                 String   @map("owner_id")
  owner                   User     @relation("OwnerPortOrders", fields: [ownerId], references: [id])
  portId                  String   @map("port_id")
  port                    CTOPort  @relation(fields: [portId], references: [id])
  notes                   PortOrderNote[]
  
  @@map("port_service_orders")
}

// Modelo de nota de ordem de serviço de porta
model PortOrderNote {
  id            String   @id @default(uuid())
  content       String
  createdAt     DateTime @default(now()) @map("created_at")
  isSystemNote  Boolean  @default(false) @map("is_system_note")
  
  // Relações
  orderId       String   @map("order_id")
  order         PortServiceOrder @relation(fields: [orderId], references: [id])
  authorId      String   @map("author_id")
  authorName    String   @map("author_name")
  
  @@map("port_order_notes")
}


// Modelo para marketplace
model MarketplaceListing {
  id          String   @id @default(uuid())
  location    String
  quantity    Int
  price       Float
  technology  String
  available   Int      @default(0)
  rented      Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relações
  ownerId     String   @map("owner_id")
  
  @@map("marketplace_listings")
}

// Modelo para atividades do dashboard
model Activity {
  id          String   @id @default(uuid())
  action      String
  details     String
  type        String
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@map("activities")
}

// Modelo para gerenciar a assinatura de cada operadora
model OperatorSubscription {
  id                   String    @id @default(uuid())
  operatorId           String    @unique @map("operator_id")
  operator             Operator  @relation(fields: [operatorId], references: [id])
  planId               String    @map("plan_id")
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  stripeSubscriptionId String    @unique @map("stripe_subscription_id") // ID da Subscription no Stripe
  stripeCustomerId     String    @map("stripe_customer_id") // ID do Customer no Stripe
  status               String    // active, canceled, past_due, trialing etc. (vem do Stripe)
  currentPeriodStart   DateTime  @map("current_period_start")
  currentPeriodEnd     DateTime  @map("current_period_end")
  cancelAtPeriodEnd    Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt           DateTime? @map("canceled_at")
  trialStart           DateTime? @map("trial_start")
  trialEnd             DateTime? @map("trial_end")

  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  @@map("operator_subscriptions")
}



// Modelo para Planos de Assinatura (definidos no Stripe, replicados aqui para referência)
model SubscriptionPlan {
  id             String    @id @default(uuid())
  name           String    // Nome do plano (ex: Básico Mensal)
  description    String?   // Descrição do plano
  stripePriceId  String    @unique @map("stripe_price_id") // ID do Price no Stripe
  price          Decimal   @db.Decimal(10, 2) // Preço (pode ser útil ter aqui)
  currency       String    @default("BRL")
  interval       String    // month, year
  intervalCount  Int       @default(1) @map("interval_count")
  active         Boolean   @default(true) // Se o plano está ativo no seu sistema
  portsCapacity          Int       @default(0) @map("ports_capacity")

  // Relacionamento
  operatorSubscriptions OperatorSubscription[]

  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("subscription_plans")
}