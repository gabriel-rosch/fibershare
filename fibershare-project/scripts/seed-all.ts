import { createClient } from "@supabase/supabase-js"
import { exec } from "child_process"
import { promisify } from "util"

const execAsync = promisify(exec)

// Configura√ß√£o do cliente Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ""
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ""
const supabase = createClient(supabaseUrl, supabaseKey)

async function runScript(scriptName: string): Promise<void> {
  console.log(`\nüå± Executando script: ${scriptName}...`)
  try {
    const { stdout, stderr } = await execAsync(`ts-node --transpile-only scripts/${scriptName}.ts`)
    if (stdout) console.log(stdout)
    if (stderr) console.error(stderr)
    console.log(`‚úÖ Script ${scriptName} conclu√≠do com sucesso!`)
  } catch (error) {
    console.error(`‚ùå Erro ao executar o script ${scriptName}:`, error)
  }
}

async function seedAll() {
  console.log("üöÄ Iniciando processo de seed completo do banco de dados...")

  // Verificar conex√£o com o Supabase
  try {
    const { data, error } = await supabase.from("operators").select("count")
    if (error) throw error
    console.log("‚úÖ Conex√£o com o Supabase estabelecida com sucesso!")
  } catch (error) {
    console.error("‚ùå Erro ao conectar com o Supabase:", error)
    console.error("‚ö†Ô∏è Verifique suas vari√°veis de ambiente e conex√£o com o banco de dados.")
    process.exit(1)
  }

  // Executar scripts na ordem correta
  const scripts = [
    "seed-database", // Script principal
    "seed-users", // Seed de usu√°rios
    "seed-dashboard", // Seed de dados do dashboard
    "seed-port-orders", // Seed de ordens de porta
    "fix-dev-user", // Garantir que o usu√°rio de desenvolvimento esteja correto
  ]

  for (const script of scripts) {
    await runScript(script)
  }

  console.log("\nüéâ Processo de seed completo finalizado com sucesso!")
  console.log("üìä O banco de dados foi populado com todos os dados necess√°rios.")
  console.log("üîç Voc√™ pode verificar os dados no painel do Supabase.")
}

// Executar a fun√ß√£o principal
seedAll().catch((error) => {
  console.error("‚ùå Erro durante o processo de seed:", error)
  process.exit(1)
})
